<?xml version="1.0" encoding="UTF-8"?>
<!-- This web.xml file is not required when using Servlet 3.0 container,
     see implementation details http://jersey.java.net/nonav/documentation/latest/jax-rs.html -->
<web-app version="3.0"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">

    <servlet>
        <servlet-name>Jersey Web Application</servlet-name>
        <servlet-class>org.glassfish.jersey.servlet.ServletContainer</servlet-class>
        <init-param>
            <param-name>jersey.config.server.provider.packages</param-name>
            <param-value>by.mtbank</param-value>
        </init-param>
        <init-param>
            <param-name>jersey.config.server.mvc.templateBasePath.freemarker</param-name>
            <param-value>/WEB-INF/templates</param-value>
        </init-param>
        <init-param>
            <param-name>jersey.config.server.provider.classnames</param-name>
            <param-value>org.glassfish.jersey.server.mvc.freemarker.FreemarkerMvcFeature</param-value>
        </init-param>
        <init-param>
            <param-name>jersey.config.disableMoxyJson</param-name>
            <param-value>true</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
            <servlet-name>Jersey Web Application</servlet-name>
            <url-pattern>/rest/*</url-pattern>
    </servlet-mapping>

    <!--When enable freemarker in jersey, the default template loading is using ClassTemplateLoader.-->
    <!--But if you specify the jersey.config.server.mvc.templateBasePath.freemarker starting with "/". -->
    <!--FreemarkerMvcFeature will try to find template from webapp root first. (./WEB-INF)ï»¿-->

    <!--<servlet>-->
        <!--<servlet-name>javax.ws.rs.core.Application</servlet-name>-->
    <!--</servlet>-->
    <!--<servlet-mapping>-->
        <!--<servlet-name>javax.ws.rs.core.Application</servlet-name>-->
        <!--<url-pattern>/*</url-pattern>-->
    <!--</servlet-mapping>-->


    <!--<security-constraint>-->
    	<!--<web-resource-collection>-->
    		<!--<web-resource-name>Entire Application</web-resource-name>-->
    		<!--<url-pattern>/*</url-pattern>-->
    	<!--</web-resource-collection>-->
    	<!--<user-data-constraint>-->
    		<!--<transport-guarantee>CONFIDENTIAL</transport-guarantee>-->
    	<!--</user-data-constraint>-->
    <!--</security-constraint>-->

    <!--
    Prevent the visiting of MVC Views from outside the servlet container.
    RequestDispatcher.forward/include should and will still work. Removing
    this may open security holes!
-->
    <!--<security-constraint>-->
        <!--<web-resource-collection>-->
            <!--<web-resource-name>FreeMarker MVC Views</web-resource-name>-->
            <!--<url-pattern>*.ftl</url-pattern>-->
        <!--</web-resource-collection>-->
        <!--<auth-constraint>-->
            <!--&lt;!&ndash; Nobody is allowed to visit these &ndash;&gt;-->
        <!--</auth-constraint>-->
    <!--</security-constraint>-->

    <welcome-file-list>
        <welcome-file>index.html</welcome-file>
    </welcome-file-list>


</web-app>
